// <auto-generated />
using ExamProject2017.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace ExamProject2017.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20171219124607_YoutubeData")]
    partial class YoutubeData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ExamProject2017.Data.Country", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("ExamProject2017.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ExamProject2017.Models.BusinessProfile", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("BusinessName")
                        .IsRequired();

                    b.Property<string>("BusinessType")
                        .IsRequired();

                    b.Property<int>("CVR");

                    b.Property<string>("Firstname")
                        .IsRequired();

                    b.Property<string>("Industry")
                        .IsRequired();

                    b.Property<string>("Lastname")
                        .IsRequired();

                    b.Property<string>("Position")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("BusinessProfile");
                });

            modelBuilder.Entity("ExamProject2017.Models.City", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("ExamProject2017.Models.InfluencerProfile", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Address");

                    b.Property<string>("AgencyName");

                    b.Property<string>("BankAccount");

                    b.Property<string>("CPR");

                    b.Property<string>("CVR");

                    b.Property<string>("Characteristic");

                    b.Property<string>("Firstname");

                    b.Property<string>("Lastname");

                    b.Property<int>("PriceFrom");

                    b.Property<string>("WorkDescription");

                    b.HasKey("Id");

                    b.ToTable("InfluencerProfile");
                });

            modelBuilder.Entity("ExamProject2017.Models.InstagramAgeGroup", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Female13To17");

                    b.Property<int>("Female18To24");

                    b.Property<int>("Female25To34");

                    b.Property<int>("Female35To44");

                    b.Property<int>("Female45To55");

                    b.Property<int>("Female55To64");

                    b.Property<int>("Female65Plus");

                    b.Property<string>("InstagramDataId");

                    b.Property<int>("Male13To17");

                    b.Property<int>("Male18To24");

                    b.Property<int>("Male25To34");

                    b.Property<int>("Male35To44");

                    b.Property<int>("Male45To55");

                    b.Property<int>("Male55To64");

                    b.Property<int>("Male65Plus");

                    b.HasKey("Id");

                    b.HasIndex("InstagramDataId")
                        .IsUnique()
                        .HasFilter("[InstagramDataId] IS NOT NULL");

                    b.ToTable("InstagramAgeGroup");
                });

            modelBuilder.Entity("ExamProject2017.Models.InstagramCity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CityId");

                    b.Property<int>("Count");

                    b.Property<string>("InstagramDataId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("InstagramDataId");

                    b.ToTable("InstagramCity");
                });

            modelBuilder.Entity("ExamProject2017.Models.InstagramCountry", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Count");

                    b.Property<string>("CountryId");

                    b.Property<string>("InstagramDataId");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("InstagramDataId");

                    b.ToTable("InstagramCountry");
                });

            modelBuilder.Entity("ExamProject2017.Models.InstagramData", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("DayImpression");

                    b.Property<int>("DayReach");

                    b.Property<int>("FollowerCount");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<int>("MediaCount");

                    b.Property<int>("MonthImpression");

                    b.Property<int>("MonthReach");

                    b.Property<int>("WeekImpression");

                    b.Property<int>("WeekReach");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("InstagramData");
                });

            modelBuilder.Entity("ExamProject2017.Models.YoutubeData", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("Comments");

                    b.Property<int>("Dislike");

                    b.Property<double>("Engagement");

                    b.Property<double>("FemaleViews");

                    b.Property<int>("Likes");

                    b.Property<double>("MaleViews");

                    b.Property<int>("Subcribers");

                    b.Property<int>("Views");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("YoutubeData");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ExamProject2017.Models.BusinessProfile", b =>
                {
                    b.HasOne("ExamProject2017.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("BusinessProfile")
                        .HasForeignKey("ExamProject2017.Models.BusinessProfile", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ExamProject2017.Models.InfluencerProfile", b =>
                {
                    b.HasOne("ExamProject2017.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("InfluencerProfile")
                        .HasForeignKey("ExamProject2017.Models.InfluencerProfile", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ExamProject2017.Models.InstagramAgeGroup", b =>
                {
                    b.HasOne("ExamProject2017.Models.InstagramData", "InstagramData")
                        .WithOne("InstagramAgeGroup")
                        .HasForeignKey("ExamProject2017.Models.InstagramAgeGroup", "InstagramDataId");
                });

            modelBuilder.Entity("ExamProject2017.Models.InstagramCity", b =>
                {
                    b.HasOne("ExamProject2017.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("ExamProject2017.Models.InstagramData", "InstagramData")
                        .WithMany("InstagramCity")
                        .HasForeignKey("InstagramDataId");
                });

            modelBuilder.Entity("ExamProject2017.Models.InstagramCountry", b =>
                {
                    b.HasOne("ExamProject2017.Data.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("ExamProject2017.Models.InstagramData", "InstagramData")
                        .WithMany("InstagramCountry")
                        .HasForeignKey("InstagramDataId");
                });

            modelBuilder.Entity("ExamProject2017.Models.InstagramData", b =>
                {
                    b.HasOne("ExamProject2017.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("ExamProject2017.Models.YoutubeData", b =>
                {
                    b.HasOne("ExamProject2017.Models.ApplicationUser", "Influencer")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ExamProject2017.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ExamProject2017.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ExamProject2017.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ExamProject2017.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
